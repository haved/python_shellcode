import ctypes
import mmap

libc = ctypes.cdll.LoadLibrary(None)
mmap_function = libc.mmap
mmap_function.restype = ctypes.c_void_p
mmap_function.argtypes = (ctypes.c_void_p, ctypes.c_size_t,
                          ctypes.c_int, ctypes.c_int,
                          ctypes.c_int, ctypes.c_size_t)
CODE_SIZE = 10000000
code_address = mmap_function(None, CODE_SIZE,
                             mmap.PROT_READ | mmap.PROT_WRITE | mmap.PROT_EXEC,
                             mmap.MAP_PRIVATE | mmap.MAP_ANONYMOUS,
                             -1, 0)
if code_address == -1:
    raise OSError('mmap failed to allocate memory')

code=b'UH\x89\xe5H\x89}\xf8H\x8bE\xf8H\x8b\x00H\x8dP\x01H\x8bE\xf8H\x89\x10\x90]\xc3\x0f\x1f\x00UH\x89\xe5H\x89}\xe8H\x89u\xe0H\x8bE\xe8H\x8b@\x08H\x8b@8\x89E\xf4\x8bE\xf4Hc\xd0H\x8bE\xe8H\x01\xd0H\x89E\xf8H\x8bU\xe0H\x8bE\xf8H\x89\x10\x8bE\xf4]\xc3\x0f\x1f@\x00UH\x89\xe5H\x83\xec8H\x89}\xd8H\x89u\xd0H\x89U\xc8H\x8bE\xd8H\x8b@\x08H\x8b@8\x89E\xec\x8bE\xecHc\xd0H\x8bE\xd8H\x01\xd0H\x8b\x00H\x89E\xf0H\x8bE\xf0H\x05\xa0\x03\x00\x00H\x89E\xf8H\x8bE\xd0\x89\xc2H\x8bE\xf8\x89\x10H\x8bE\xf8\x8b\x10H\x8bE\xf8H\x83\xc0\x04\x83\xc2\x14\x89\x10H\x8bE\xd8H\x89\xc7\xe80\xff\xff\xffH\x8bE\xd8\xc9\xc3f.\x0f\x1f\x84\x00\x00\x00\x00\x00UH\x89\xe5H\x83\xecPH\x89}\xc8H\x89u\xc0H\x89U\xb8H\x8bE\xc0H\x8b@\x08H\x8b\x80\xa8\x00\x00\x00%\x00\x00\x00\x04H\x85\xc0u\x1fH\x8d\r\x00\x00\x00\x00\xba0\x00\x00\x00H\x8d5\x00\x00\x00\x00H\x8d=\x00\x00\x00\x00\xe8\x00\x00\x00\x00H\x8bE\xc0H\x83\xc0\x18H\x89E\xe0H\x8bE\xe0H\x8b\x00H\x89E\xe8H\x8bE\xc8H\x8b@\x08H\x8b@8\x89E\xdc\x8bE\xdcHc\xd0H\x8bE\xc8H\x01\xd0H\x8b\x00H\x89E\xf0H\x8bE\xf0H\x05\xd0\x02\x00\x00H\x89E\xf8H\x8bE\xe8H\x89\xc7\xe8\x80\xfe\xff\xffH\x8bE\xf8H\x8dP\x04\x8b\x02\x8dH\x01\x89\nH\x8bU\xf8H\x83\xc2\x08\x8b\n\x99\xf7\xf9\x89\xd0H\x98H\x83\xc0\x04H\x8d\x14\xc5\x00\x00\x00\x00H\x8bE\xf8H\x01\xc2H\x8bE\xe8H\x89\x02H\x8bE\xc8H\x89\xc7\xe8:\xfe\xff\xffH\x8bE\xc8\xc9\xc3\x0f\x1f@\x00UH\x89\xe5H\x89}\xd8H\x89u\xd0H\x89U\xc8H\x8bE\xd8H\x8b@\x08H\x8b@8\x89E\xec\x8bE\xecHc\xd0H\x8bE\xd8H\x01\xd0H\x8b\x00H\x89E\xf0H\x8bE\xf0H\x05\xe0\x01\x00\x00H\x89E\xf8H\x8bE\xf8\x8b\x00\x8dH\x01H\x8bU\xf8\x89\nH\x8bU\xf8H\x83\xc2\x08\x8b\n\x99\xf7\xf9\x89\xd0H\x98H\x83\xc0\x04H\x8d\x14\xc5\x00\x00\x00\x00H\x8bE\xf8H\x01\xd0H\x8b\x00]\xc3'
assert len(code) <= CODE_SIZE
ctypes.memmove(code_address, code, len(code))

setCallAddress_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.py_object, ctypes.c_void_p)
setCallAddress = ctypes.cast(code_address+0x20, setCallAddress_type)

print("code address:", hex(code_address))

def make_superqu(x):
    print("Hei")
def superenqu(x):
    print("uff")
def superdequ():
    print("fak")

setCallAddress(make_superqu, code_address+0x60)
setCallAddress(superenqu, code_address+0x130)
setCallAddress(superdequ, code_address+0x220)

def getDataAt(offset):
    ptr = ctypes.cast(code_address+0x400+offset, ctypes.POINTER(ctypes.c_int))
    value = ptr.contents.value
    print(hex(value))

print("Hei:", make_superqu((3)))
getDataAt(0)
getDataAt(4)
print("Hei:", make_superqu((3, 5)))
getDataAt(0)
getDataAt(4)

class Queue():
    def __init__(self, max_size):
        make_superqu(max_size)
        self.enqueue = superenqu
        self.dequeue = superdequ
    def enqueue(self, x):
        pass
    def dequeue(self):
        pass

highscore = False

#q = Queue(100)

item = 5

#q.enqueue(item)

#print(q.dequeue())
